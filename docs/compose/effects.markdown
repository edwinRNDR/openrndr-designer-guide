---
# File generated by dokgen. Do not edit. 
# Edit 'src/main/kotlin/docs/80_Compose/C200_Effects.kt' instead.
layout: default
title: Effects
parent: Compose
last_modified_at: 2025.10.30 07:02:05 +0000
nav_order: 200
has_children: false
---
 
# Effects 
 
## Blurred text
 
 
<img alt="../media/effects-001.png" src="../media/effects-001.png" loading="lazy"> 
 
```kotlin
import org.openrndr.application
import org.openrndr.color.ColorRGBa
import org.openrndr.draw.loadFont
import org.openrndr.draw.loadImage
import org.openrndr.extra.compositor.*
import org.openrndr.extra.fx.blur.ApproximateGaussianBlur
import org.openrndr.extra.fx.distort.Perturb
import org.openrndr.extra.fx.dither.CMYKHalftone
import org.openrndr.extra.imageFit.imageFit

fun main() = application {
    configure {
        width = 720
        height = 720
    }
    program {
    
        val c = compose {
        
            layer {
                val image = loadImage("data/images/cheeta.jpg")
                draw {
                    drawer.imageFit(image, drawer.bounds)
                }
            }
            // a layer on top of the base layer
            layer {
                val font = loadFont("data/fonts/default.otf", 128.0)
                draw {
                    drawer.fill = ColorRGBa.WHITE
                    drawer.fontMap = font
                    drawer.text("CAT", drawer.bounds.center.x - 200.0, drawer.bounds.center.y)
                }
                // enable effects
                post(ApproximateGaussianBlur()) {
                    window = 25
                    sigma = 15.0
                }
            }
        }
        
        extend {
            c.draw(drawer)
        }
    }
}
``` 
 
## Blurred image
 
 
<img alt="../media/effects-002.png" src="../media/effects-002.png" loading="lazy"> 
 
```kotlin
import org.openrndr.application
import org.openrndr.color.ColorRGBa
import org.openrndr.draw.loadFont
import org.openrndr.draw.loadImage
import org.openrndr.extra.compositor.*
import org.openrndr.extra.fx.blur.ApproximateGaussianBlur
import org.openrndr.extra.fx.distort.Perturb
import org.openrndr.extra.fx.dither.CMYKHalftone
import org.openrndr.extra.imageFit.imageFit

fun main() = application {
    configure {
        width = 720
        height = 720
    }
    program {
        val c = compose {
        
            layer {
                val image = loadImage("data/images/cheeta.jpg")
                draw {
                    drawer.imageFit(image, drawer.bounds)
                }
                // enable effects
                post(ApproximateGaussianBlur()) {
                    window = 25
                    sigma = 15.0
                }
            }
            // a layer on top of the base layer
            layer {
                val font = loadFont("data/fonts/default.otf", 128.0)
                draw {
                    drawer.fill = ColorRGBa.WHITE
                    drawer.fontMap = font
                    drawer.text("CAT", drawer.bounds.center.x - 200.0, drawer.bounds.center.y)
                }
            }
        }
        
        extend {
            c.draw(drawer)
        }
    }
}
``` 
 
## Distorted text
 
 
<img alt="../media/effects-003.png" src="../media/effects-003.png" loading="lazy"> 
 
```kotlin
import org.openrndr.application
import org.openrndr.color.ColorRGBa
import org.openrndr.draw.loadFont
import org.openrndr.draw.loadImage
import org.openrndr.extra.compositor.*
import org.openrndr.extra.fx.blur.ApproximateGaussianBlur
import org.openrndr.extra.fx.distort.Perturb
import org.openrndr.extra.fx.dither.CMYKHalftone
import org.openrndr.extra.imageFit.imageFit

fun main() = application {
    configure {
        width = 720
        height = 720
    }
    program {
    
        val c = compose {
        
            layer {
                val image = loadImage("data/images/cheeta.jpg")
                draw {
                    drawer.imageFit(image, drawer.bounds)
                }
            }
            // a layer on top of the base layer
            layer {
                val font = loadFont("data/fonts/default.otf", 128.0)
                draw {
                    drawer.fill = ColorRGBa.WHITE
                    drawer.fontMap = font
                    drawer.text("CAT", drawer.bounds.center.x - 200.0, drawer.bounds.center.y)
                }
                // enable effects
                post(Perturb()) {
                    gain = 0.05
                }
            }
        }
        
        extend {
            c.draw(drawer)
        }
    }
}
``` 
 
## CMYK Halftone

This effect will only work well with a light (or white) background.
 
 
<img alt="../media/effects-004.png" src="../media/effects-004.png" loading="lazy"> 
 
```kotlin
import org.openrndr.application
import org.openrndr.color.ColorRGBa
import org.openrndr.draw.loadFont
import org.openrndr.draw.loadImage
import org.openrndr.extra.compositor.*
import org.openrndr.extra.fx.blur.ApproximateGaussianBlur
import org.openrndr.extra.fx.distort.Perturb
import org.openrndr.extra.fx.dither.CMYKHalftone
import org.openrndr.extra.imageFit.imageFit


application {
    configure {
        width = 720
        height = 960
    }
    program {
        val c = compose {
            layer {
                draw {
                    drawer.clear(ColorRGBa.WHITE)
                }
                layer {
                    val image = loadImage("data/images/cheeta.jpg")
                    draw {
                        drawer.imageFit(image, drawer.bounds)
                    }
                    
                    post(CMYKHalftone()) {
                        this.scale = 20.0
                    }
                }
            }
        }
        extend {
            c.draw(drawer)
        }
    }
}
``` 

[edit on GitHub](https://github.com/openrndr/openrndr-guide/blob/main/src/main/kotlin/docs/80_Compose/C200_Effects.kt){: .btn .btn-github }