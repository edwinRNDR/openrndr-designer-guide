---
# File generated by dokgen. Do not edit. 
# Edit 'src/main/kotlin/docs/30_Typography/C100_Writing.kt' instead.
layout: default
title: Writing
parent: Typography
last_modified_at: 2025.10.30 07:02:05 +0000
nav_order: 100
has_children: false
---
 
# Writing in OPENRNDR 
 
## Text in a box 
 
<img alt="../media/writing-001.png" src="../media/writing-001.png" loading="lazy"> 
 
```kotlin
import org.openrndr.application
import org.openrndr.color.ColorRGBa
import org.openrndr.color.rgb
import org.openrndr.draw.loadFont
import org.openrndr.extra.shapes.primitives.grid
import org.openrndr.extra.textwriter.writer
import org.openrndr.shape.Rectangle

fun main() = application {
    configure {
        width = 720
        height = 720
    }
    program {
        extend {
            val r = Rectangle(40.0, 40.0, 300.0, 300.0)
            drawer.fill = null
            drawer.stroke = ColorRGBa.PINK
            
            // preview the rectangle
            drawer.rectangle(r)
            
            drawer.fill = ColorRGBa.WHITE
            
            // set the font
            drawer.fontMap = loadFont("data/fonts/default.otf", 32.0)
            writer {
                // set the box to our previously created rectangle r
                // add some additional margins
                box = r.offsetEdges(-10.0)
                newLine()
                text("Here is a text that should not be able to leave this box. Let's just ramble on for a bit. Ok then.")
            }
        }
    }
}
``` 
 
<img alt="../media/writing-002.png" src="../media/writing-002.png" loading="lazy"> 
 
## Tracking and leading

Tracking controls the horizontal spacing between characters. Leading controls the vertical spacing between lines. 
 
```kotlin
import org.openrndr.application
import org.openrndr.color.ColorRGBa
import org.openrndr.color.rgb
import org.openrndr.draw.loadFont
import org.openrndr.extra.shapes.primitives.grid
import org.openrndr.extra.textwriter.writer
import org.openrndr.shape.Rectangle

fun main() = application {
    configure {
        width = 720
        height = 720
    }
    program {
        extend {
        
            // set the font
            drawer.fontMap = loadFont("data/fonts/default.otf", 32.0)
            writer {
                // set the box
                box = drawer.bounds.offsetEdges(-100.0)
                leading = 10.0
                tracking = 15.0
                text("Here is a text that should not be able to leave this box. Let's just ramble on for a bit. Ok then.")
                newLine()
                text("Here is another line of text.")
            }
        }
    }
}
``` 
 
## Multiple fonts

Tracking controls the horizontal spacing between characters. Leading controls the vertical spacing between lines. 
 
<img alt="../media/writing-003.png" src="../media/writing-003.png" loading="lazy"> 
 
```kotlin
import org.openrndr.application
import org.openrndr.color.ColorRGBa
import org.openrndr.color.rgb
import org.openrndr.draw.loadFont
import org.openrndr.extra.shapes.primitives.grid
import org.openrndr.extra.textwriter.writer
import org.openrndr.shape.Rectangle

fun main() = application {
    configure {
        width = 720
        height = 720
    }
    program {
        val large = loadFont("data/fonts/default.otf", 64.0)
        val medium = loadFont("data/fonts/default.otf", 32.0)
        val small = loadFont("data/fonts/default.otf", 16.0)
        
        extend {
            // set the font
            
            writer {
                // set the box
                box = drawer.bounds.offsetEdges(-100.0)
                drawer.fontMap = large
                text("I am a large sized font")
                newLine()
                
                drawer.fontMap = medium
                text("I am a medium sized font, well well well, kinda")
                newLine()
                
                drawer.fontMap = small
                text("I am a small sized font. so smol.")
                newLine()
            }
        }
    }
}
``` 
 
## Text alignment  
  
Text alignment is controlled by the `horizontalAlign` and `verticalAlign` properties.     
     
 
<img alt="../media/writing-004.png" src="../media/writing-004.png" loading="lazy"> 
 
```kotlin
import org.openrndr.application
import org.openrndr.color.ColorRGBa
import org.openrndr.color.rgb
import org.openrndr.draw.loadFont
import org.openrndr.extra.shapes.primitives.grid
import org.openrndr.extra.textwriter.writer
import org.openrndr.shape.Rectangle

fun main() = application {
    configure {
        width = 720
        height = 720
    }
    program {
        val large = loadFont("data/fonts/default.otf", 32.0)
        
        extend {
            val grid = drawer.bounds.grid(3, 3, 10.0, 10.0, 10.0, 10.0)
            
            for ((y, row) in grid.withIndex()) {
                for ((x, cell) in row.withIndex()) {
                    writer {
                        // set the box
                        box = cell
                        drawer.fontMap = large
                        horizontalAlign = x / 2.0
                        verticalAlign = y / 2.0
                        text("($horizontalAlign, $verticalAlign)")
                    }
                }
            }
        }
    }
}
``` 

[edit on GitHub](https://github.com/openrndr/openrndr-guide/blob/main/src/main/kotlin/docs/30_Typography/C100_Writing.kt){: .btn .btn-github }