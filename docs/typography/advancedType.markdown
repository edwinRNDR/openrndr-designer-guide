---
# File generated by dokgen. Do not edit. 
# Edit 'src/main/kotlin/docs/30_Typography/C200_AdvancedType.kt' instead.
layout: default
title: Advanced type
parent: Typography
last_modified_at: 2025.10.30 07:02:05 +0000
nav_order: 200
has_children: false
---
 
# Advanced type in OPENRNDR 
 
## Contour of a text

Get shapes and contours of text and use `.sub` do draw only a subsection of it. 
 
 
<video controls preload="none" loop poster="../media/advanced-type-001-thumb.jpg">
    <source src="../media/advanced-type-001.mp4" type="video/mp4">
</video>
 
 
```kotlin
import org.openrndr.application
import org.openrndr.color.ColorRGBa
import org.openrndr.color.rgb
import org.openrndr.draw.font.loadFace
import org.openrndr.draw.loadFont
import org.openrndr.extra.shapes.text.shapesFromText
import org.openrndr.extra.textwriter.writer
import org.openrndr.shape.Rectangle

fun main() = application {
    configure {
        width = 720
        height = 720
    }
    program {
        val face = loadFace("data/fonts/default.otf")
        val shapes = shapesFromText(face, "OPENRNDR", 150.0)
        val contours = shapes.flatMap {
            it.contours
        }
        
        extend {
            drawer.fill = null
            drawer.stroke = ColorRGBa.PINK
            drawer.translate(width / 16.0, height / 2.0)
            for (contour in contours) {
                drawer.contour(contour.sub(seconds * 0.1, seconds * 0.1 + 0.5))
            }
        }
    }
}
``` 
 
## Points on text
 
 
<img alt="../media/advanced-type-002.png" src="../media/advanced-type-002.png" loading="lazy"> 
 
```kotlin
import org.openrndr.application
import org.openrndr.color.ColorRGBa
import org.openrndr.color.rgb
import org.openrndr.draw.font.loadFace
import org.openrndr.draw.loadFont
import org.openrndr.extra.shapes.text.shapesFromText
import org.openrndr.extra.textwriter.writer
import org.openrndr.shape.Rectangle

fun main() = application {
    configure {
        width = 720
        height = 720
    }
    program {
        val face = loadFace("data/fonts/default.otf")
        val shapes = shapesFromText(face, "OPENRNDR", 150.0)
        val contours = shapes.flatMap {
            it.contours
        }
        
        extend {
            drawer.stroke = null
            drawer.fill = ColorRGBa.PINK
            drawer.translate(width / 16.0, height / 2.0)
            for (contour in contours) {
                // exercise: change the number 10.0 here
                val pts = contour.equidistantPositions((contour.length / 10.0).toInt())
                drawer.circles(pts, 3.0)
            }
        }
    }
}
``` 

[edit on GitHub](https://github.com/openrndr/openrndr-guide/blob/main/src/main/kotlin/docs/30_Typography/C200_AdvancedType.kt){: .btn .btn-github }