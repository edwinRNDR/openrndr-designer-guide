---
# File generated by dokgen. Do not edit. 
# Edit 'src/main/kotlin/docs/20_Colors/C250_ColorTheory.kt' instead.
layout: default
title: Color theory
parent: Colors
last_modified_at: 2025.10.30 07:02:05 +0000
nav_order: 250
has_children: false
---
 
# Color theory
        
             
 
## Analogous colors
 
 
<img alt="../media/color-theory-001.png" src="../media/color-theory-001.png" loading="lazy"> 
 
```kotlin
import org.openrndr.application
import org.openrndr.color.ColorRGBa
import org.openrndr.extra.color.palettes.analogous
import org.openrndr.extra.color.palettes.splitComplementary
import org.openrndr.extra.color.palettes.tetradic
import org.openrndr.extra.color.palettes.triadic
import org.openrndr.extra.color.presets.LIGHT_GREEN
import org.openrndr.extra.color.presets.ORANGE_RED
import org.openrndr.extra.color.spaces.ColorOKHSVa
import org.openrndr.extra.color.tools.shiftHue
import org.openrndr.extra.shapes.primitives.grid

fun main() = application {
    configure {
        width = 720
        height = 720
    }
    program {
        extend {
            val grid = drawer.bounds.grid(8, 12, 10.0, 10.0, 10.0, 10.0)
            for ((index, row) in grid.withIndex()) {
                val palette = ColorRGBa.PINK.analogous<ColorOKHSVa>((index + 1.0) * (360.0 / 12), 8)
                for ((x, cell) in row.withIndex()) {
                    drawer.fill = palette[x]
                    drawer.rectangle(cell)
                }
            }
        }
    }
}
``` 
 
## Triadic colors
 
 
<img alt="../media/color-theory-002.png" src="../media/color-theory-002.png" loading="lazy"> 
 
```kotlin
import org.openrndr.application
import org.openrndr.color.ColorRGBa
import org.openrndr.extra.color.palettes.analogous
import org.openrndr.extra.color.palettes.splitComplementary
import org.openrndr.extra.color.palettes.tetradic
import org.openrndr.extra.color.palettes.triadic
import org.openrndr.extra.color.presets.LIGHT_GREEN
import org.openrndr.extra.color.presets.ORANGE_RED
import org.openrndr.extra.color.spaces.ColorOKHSVa
import org.openrndr.extra.color.tools.shiftHue
import org.openrndr.extra.shapes.primitives.grid

fun main() = application {
    configure {
        width = 720
        height = 720
    }
    program {
        extend {
            val grid = drawer.bounds.grid(3, 12, 10.0, 10.0, 10.0, 10.0)
            for ((index, row) in grid.withIndex()) {
                val palette = ColorRGBa.RED.shiftHue<ColorOKHSVa>(index * (120.0 / 12.0)).triadic<ColorOKHSVa>()
                for ((x, cell) in row.withIndex()) {
                    drawer.fill = palette[x]
                    drawer.rectangle(cell)
                }
            }
        }
    }
}
``` 
 
## Tetradic colors
 
 
<img alt="../media/color-theory-003.png" src="../media/color-theory-003.png" loading="lazy"> 
 
```kotlin
import org.openrndr.application
import org.openrndr.color.ColorRGBa
import org.openrndr.extra.color.palettes.analogous
import org.openrndr.extra.color.palettes.splitComplementary
import org.openrndr.extra.color.palettes.tetradic
import org.openrndr.extra.color.palettes.triadic
import org.openrndr.extra.color.presets.LIGHT_GREEN
import org.openrndr.extra.color.presets.ORANGE_RED
import org.openrndr.extra.color.spaces.ColorOKHSVa
import org.openrndr.extra.color.tools.shiftHue
import org.openrndr.extra.shapes.primitives.grid

fun main() = application {
    configure {
        width = 720
        height = 720
    }
    program {
        extend {
            val grid = drawer.bounds.grid(4, 12, 10.0, 10.0, 10.0, 10.0)
            for ((index, row) in grid.withIndex()) {
                val palette = ColorRGBa.ORANGE_RED.tetradic<ColorOKHSVa>(aspectRatio = 0.1 + index * 0.2)
                for ((x, cell) in row.withIndex()) {
                    drawer.fill = palette[x]
                    drawer.rectangle(cell)
                }
            }
        }
    }
}
``` 
 
## Split complementary colors
 
 
<img alt="../media/color-theory-004.png" src="../media/color-theory-004.png" loading="lazy"> 
 
```kotlin
import org.openrndr.application
import org.openrndr.color.ColorRGBa
import org.openrndr.extra.color.palettes.analogous
import org.openrndr.extra.color.palettes.splitComplementary
import org.openrndr.extra.color.palettes.tetradic
import org.openrndr.extra.color.palettes.triadic
import org.openrndr.extra.color.presets.LIGHT_GREEN
import org.openrndr.extra.color.presets.ORANGE_RED
import org.openrndr.extra.color.spaces.ColorOKHSVa
import org.openrndr.extra.color.tools.shiftHue
import org.openrndr.extra.shapes.primitives.grid

fun main() = application {
    configure {
        width = 720
        height = 720
    }
    program {
        extend {
            val grid = drawer.bounds.grid(5, 12, 10.0, 10.0, 10.0, 10.0)
            for ((index, row) in grid.withIndex()) {
                val palette = ColorRGBa.LIGHT_GREEN.splitComplementary<ColorOKHSVa>((index + 1.0) * 1.0 / 12.0, double = true)
                
                for ((x, cell) in row.withIndex()) {
                    drawer.fill = palette[x]
                    drawer.rectangle(cell)
                }
            }
        }
    }
}
``` 

[edit on GitHub](https://github.com/openrndr/openrndr-guide/blob/main/src/main/kotlin/docs/20_Colors/C250_ColorTheory.kt){: .btn .btn-github }